<?xml version="1.0" encoding="UTF-8"?>
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->

<!-- 属性描述 
	scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true 
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="e:/logs/logback" />
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />
	
	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="ConsoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger [%file:%line] - %msg%n</pattern>
		</encoder>
	</appender>
	<!-- 错误日志 -->
	<appender name="ErrorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${log_dir}/error.log</file>  
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy" >
			<FileNamePattern>${log_dir}/error.%i.log</FileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>100</maxIndex>
		</rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>100MB</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%file:%line] - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 系统日志 -->
	<appender name="SystemAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${log_dir}/system.log</file>  
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy" >
			<FileNamePattern>${log_dir}/error.%i.log</FileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>100</maxIndex>
		</rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>100MB</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%file:%line] - %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="ServiceAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${log_dir}/debug.log</file>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/debug.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%file:%line] - %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="DruidAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${log_dir}/db.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy" >
			<FileNamePattern>${log_dir}/db.%i.log</FileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>100</maxIndex>
		</rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>100MB</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} - %msg%n</pattern>
		</encoder>
	</appender>
	<appender name="DruidErrorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${log_dir}/db-e.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy" >
			<FileNamePattern>${log_dir}/db-e.%i.log</FileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>100</maxIndex>
		</rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>100MB</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 指定包的同时,appender里面过滤日志级别 -->
	<logger name="druid.sql" additivity="false">
		<appender-ref ref="DruidAppender" />
		<appender-ref ref="DruidErrorAppender" />
	</logger>
    <logger name="com.alibaba.druid" additivity="false">
		<appender-ref ref="DruidAppender" />
		<appender-ref ref="DruidErrorAppender" />
	</logger>
	
	<logger name="com.afan" additivity="false">
		<appender-ref ref="SystemAppender" />
		<appender-ref ref="ErrorAppender" />
		<appender-ref ref="ConsoleAppender" />
	</logger>
	
	<logger name="com.du.service" additivity="false">
		<appender-ref ref="ServiceAppender" />
		<appender-ref ref="ErrorAppender" />
		<appender-ref ref="ConsoleAppender" />
	</logger>
	
	<logger name="test.db" additivity="false">
		<appender-ref ref="ServiceAppender" />
		<appender-ref ref="ErrorAppender" />
		<appender-ref ref="ConsoleAppender" />
	</logger>

	<logger name="java.sql.PreparedStatement" level="DEBUG" />
	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="org.springframework" level="WARN"/>
	<!-- <logger name="in ch.qos.logback" level="ERROR"/> -->
	<logger name="org.apache.http" level="WARN"/>
	
	<!-- <logger name="org.logicalcobwebs.proxool" level="WARN"/> -->

	

	<!-- root级别 DEBUG -->
	<root level="DEBUG">
		<!-- 控制台输出 -->
		<appender-ref ref="ConsoleAppender" />
		
		<!-- 文件输出，不加到日root下面，否则都按找filter规则走了包的规则会无效 -->
		<!-- <appender-ref ref="SystemAppender" />
		<appender-ref ref="ServiceAppender" />
		<appender-ref ref="DruidAppender" /> -->
	</root>
</configuration>  
